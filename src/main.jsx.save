import ReactDOM from "react-dom/client";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import "./index.css";
import App from "./App";
import Login from "./Login";
import Register from "./Register";
import AdminDashboard from "./AdminDashboard.jsx";
import AddGuest from "./AddGuest.jsx";
import { onAuthStateChanged } from "firebase/auth";
import { auth, db } from "./firebase";
import { doc, getDoc } from "firebase/firestore";

const root = ReactDOM.createRoot(document.getElementById("root"));

const getCurrentUserRole = () =>
  new Promise((resolve) => {
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        try {
          const docRef = doc(db, "users", user.uid);
          const docSnap = await getDoc(docRef);
          resolve(docSnap.data()?.role || "None");
        } catch {
          resolve("None");
        }
      } else {
        resolve(null);
      }
    });
  });

function ProtectedRoute({ children, roles = [] }) {
  const [role, setRole] = React.useState(null);
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    getCurrentUserRole().then((r) => {
      setRole(r);
      setLoading(false);
    });
  }, []);

  if (loading) return <div className="text-center mt-10 text-xl">Loading...</div>;
  if (!role) return <Navigate to="/login" />;
  if (!roles.includes(role)) return <div className="text-center text-red-500 mt-10">Access Denied</div>;

  return children;
}

root.render(
  <React.StrictMode>
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" />} />
        <Route path="/login" element={<Login />} />
        <Route path="/dashboard/add-guest" element={<AddGuest />} />
        <Route path="/register" element={<Register />} />
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute roles={["superadmin", "admin", "property-director", "hosting-manager"]}>
              <AdminDashboard />
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  </React.StrictMode>
);
